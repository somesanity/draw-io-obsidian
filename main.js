/*
THIS IS A GENERATED/BUNDLED FILE BY ESBUILD
if you want to view the source, please visit the github repository of this plugin
*/

var __create = Object.create;
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __getProtoOf = Object.getPrototypeOf;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toESM = (mod, isNodeMode, target) => (target = mod != null ? __create(__getProtoOf(mod)) : {}, __copyProps(
  // If the importer is in node compatibility mode or this is not an ESM
  // file that has been converted to a CommonJS file using a Babel-
  // compatible transform (i.e. "__esModule" has not been set), then set
  // "default" to the CommonJS "module.exports" for node compatibility.
  isNodeMode || !mod || !mod.__esModule ? __defProp(target, "default", { value: mod, enumerable: true }) : target,
  mod
));
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);

// main.ts
var main_exports = {};
__export(main_exports, {
  default: () => DrawIOPlugin
});
module.exports = __toCommonJS(main_exports);
var import_obsidian = require("obsidian");
var path = __toESM(require("path"));
var fs = __toESM(require("fs"));
var import_child_process = require("child_process");
var import_buffer = require("buffer");
var DRAWIO_VIEW = "drawio-webview";
var DrawIOPlugin = class extends import_obsidian.Plugin {
  constructor() {
    super(...arguments);
    this.serveProcess = null;
  }
  async onload() {
    this.registerView(DRAWIO_VIEW, (leaf) => new DrawIOView(leaf, this));
    this.addRibbonIcon("shapes", "Open Draw.io", async () => {
      await this.launchDrawioServer();
      const leaf = this.app.workspace.getLeaf(true);
      await leaf.setViewState({
        type: DRAWIO_VIEW,
        active: true
      });
    });
    document.body.addClass("drawio-plugin-body");
    new import_obsidian.Notice("\u2705 Draw.io plugin loaded");
  }
  onunload() {
    if (this.serveProcess) {
      this.serveProcess.kill("SIGTERM");
      this.serveProcess = null;
      new import_obsidian.Notice("\u{1F6D1} Draw.io server stopped");
    }
    this.app.workspace.detachLeavesOfType(DRAWIO_VIEW);
    document.body.removeClass("drawio-plugin-body");
  }
  async launchDrawioServer() {
    var _a, _b;
    if (this.serveProcess)
      return;
    const vaultBasePath = this.app.vault.adapter.basePath;
    const pluginDir = path.join(vaultBasePath, this.manifest.dir);
    const webAppPath = path.join(pluginDir, "webapp");
    if (!fs.existsSync(webAppPath)) {
      new import_obsidian.Notice("\u{1F4C2} 'webapp' folder not found. Please ensure Draw.io webapp is in your plugin folder.");
      return;
    }
    this.serveProcess = (0, import_child_process.spawn)("npx", ["serve", webAppPath, "-l", "8080"], {
      cwd: pluginDir,
      shell: true,
      detached: false
    });
    (_a = this.serveProcess.stdout) == null ? void 0 : _a.on("data", (data) => console.log(`Draw.io Server: ${data}`));
    (_b = this.serveProcess.stderr) == null ? void 0 : _b.on("data", (data) => console.error(`Draw.io Server Error: ${data}`));
    this.serveProcess.on("close", (code) => {
      console.log(`Draw.io server process exited with code ${code}`);
      if (this.serveProcess) {
        this.serveProcess = null;
        new import_obsidian.Notice("\u{1F6D1} Draw.io server stopped unexpectedly.");
      }
    });
    await new Promise((res) => setTimeout(res, 3e3));
  }
};
var DrawIOView = class extends import_obsidian.ItemView {
  constructor(leaf, plugin) {
    super(leaf);
    this.iframe = null;
    this.currentFile = null;
    this.plugin = plugin;
  }
  getViewType() {
    return DRAWIO_VIEW;
  }
  getDisplayText() {
    return this.currentFile ? `Draw.io - ${this.currentFile.name}` : "Draw.io";
  }
  getIcon() {
    return "shapes";
  }
  async onOpen() {
    const container = this.containerEl.children[1];
    container.empty();
    this.currentFile = null;
    this.iframe = container.createEl("iframe", {
      attr: {
        src: "http://localhost:8080/?embed=1&proto=json&libraries=1&spin=1&ui=dark&dark=1&splash=0",
        style: "width: 100%; height: 100%; border: none;"
      }
    });
    this.iframe.addEventListener("dragover", this.handleDragOver.bind(this));
    this.iframe.addEventListener("dragleave", this.handleDragLeave.bind(this));
    this.iframe.addEventListener("drop", this.handleDrop.bind(this));
    this.iframe.addEventListener("dragenter", this.handleDragEnter.bind(this));
    const messageHandler = async (event) => {
      if (event.origin !== "http://localhost:8080")
        return;
      let msg;
      try {
        msg = typeof event.data === "string" ? JSON.parse(event.data) : event.data;
      } catch (e) {
        return;
      }
      await handleDrawioMessage(msg, event.source, this.app, this);
    };
    window.addEventListener("message", messageHandler);
    this.register(() => window.removeEventListener("message", messageHandler));
  }
  async onClose() {
    this.containerEl.removeClass("drawio-drag-over");
    this.iframe = null;
    this.currentFile = null;
  }
  setCurrentFile(file) {
    this.currentFile = file;
    this.leaf.updateHeader();
  }
  handleDragEnter(event) {
    event.preventDefault();
    this.containerEl.addClass("drawio-drag-over");
  }
  handleDragOver(event) {
    event.preventDefault();
    event.dataTransfer.dropEffect = "copy";
  }
  handleDragLeave(event) {
    this.containerEl.removeClass("drawio-drag-over");
  }
  async handleDrop(event) {
    var _a;
    event.preventDefault();
    this.containerEl.removeClass("drawio-drag-over");
    const textData = (_a = event.dataTransfer) == null ? void 0 : _a.getData("text/plain");
    if (textData) {
      const obsidianUriMatch = textData.match(/^obsidian:\/\/open\?vault=.*?&file=(.*)$/);
      if (obsidianUriMatch && obsidianUriMatch[1]) {
        await this.processObsidianFileLink(decodeURIComponent(obsidianUriMatch[1]));
        return;
      }
      const obsidianInternalLinkMatch = textData.match(/\[\[(.*?)\]\]/);
      if (obsidianInternalLinkMatch && obsidianInternalLinkMatch[1]) {
        await this.processObsidianFileLink(obsidianInternalLinkMatch[1]);
        return;
      }
    }
  }
  async processObsidianFileLink(filePath) {
    const file = this.app.vault.getAbstractFileByPath(filePath);
    if (file instanceof import_obsidian.TFile) {
      const isDiagram = file.extension === "svg" || file.extension === "drawio" || file.extension === "xml";
      if (isDiagram) {
        this.setCurrentFile(file);
        new import_obsidian.Notice(`\u{1F4DD} Editing: ${file.name}`);
        const fileContent = await this.app.vault.read(file);
        this.sendMessageToDrawio({ action: "load", xml: fileContent, autosave: 1 });
      } else {
        new import_obsidian.Notice(`Unsupported file type for editing: ${file.extension}`);
      }
    } else {
      new import_obsidian.Notice(`File not found: ${filePath}`);
    }
  }
  sendMessageToDrawio(message) {
    if (this.iframe && this.iframe.contentWindow) {
      this.iframe.contentWindow.postMessage(JSON.stringify(message), "http://localhost:8080");
    }
  }
};
async function saveOrUpdateDrawioFile(app, view, svgDataUri) {
  var _a;
  const folderPath = "Drawio";
  let contentToSave;
  if (svgDataUri.startsWith("data:image/svg+xml;base64,")) {
    try {
      const base64Part = svgDataUri.split(",")[1];
      contentToSave = import_buffer.Buffer.from(base64Part, "base64").toString("utf-8");
    } catch (e) {
      new import_obsidian.Notice("\u274C Failed to decode SVG content.");
      console.error("SVG decoding error:", e);
      return;
    }
  } else {
    new import_obsidian.Notice("\u274C Invalid SVG data format received.");
    return;
  }
  let savedFile = null;
  if (view.currentFile) {
    await app.vault.modify(view.currentFile, contentToSave);
    savedFile = view.currentFile;
    new import_obsidian.Notice(`\u{1F4BE} Diagram updated: ${savedFile.path}`);
  } else {
    try {
      if (!app.vault.getAbstractFileByPath(folderPath)) {
        await app.vault.createFolder(folderPath);
      }
    } catch (err) {
      new import_obsidian.Notice("\u274C Could not create 'Drawio' folder.");
      return;
    }
    const now = new Date();
    const timestamp = `${now.getFullYear()}${(now.getMonth() + 1).toString().padStart(2, "0")}${now.getDate().toString().padStart(2, "0")}${now.getHours().toString().padStart(2, "0")}${now.getMinutes().toString().padStart(2, "0")}${now.getSeconds().toString().padStart(2, "0")}`;
    const fileName = `diagram_${timestamp}.drawio.svg`;
    const fullPath = `${folderPath}/${fileName}`;
    try {
      savedFile = await app.vault.create(fullPath, contentToSave);
      view.setCurrentFile(savedFile);
      new import_obsidian.Notice(`\u{1F4BE} Diagram saved as: ${fullPath}`);
    } catch (e) {
      new import_obsidian.Notice(`\u274C Failed to save diagram: ${fullPath}`);
      return;
    }
  }
  if (!savedFile)
    return;
  const leaves = app.workspace.getLeavesOfType("markdown");
  for (const leaf of leaves) {
    const mdView = leaf.view;
    const file = mdView.file;
    if (!file)
      continue;
    try {
      const fileContent = await app.vault.read(file);
      if (fileContent.includes(savedFile.name)) {
        await ((_a = leaf.rebuildView) == null ? void 0 : _a.call(leaf));
      }
    } catch (err) {
      console.warn(`Could not update view for ${file.path}:`, err);
    }
  }
}
async function handleDrawioMessage(msg, sourceWindow, app, view) {
  switch (msg.event) {
    case "init":
      if (view.currentFile) {
        const fileContent = await app.vault.read(view.currentFile);
        sourceWindow.postMessage(JSON.stringify({ action: "load", xml: fileContent, autosave: 1 }), "http://localhost:8080");
      } else {
        sourceWindow.postMessage(JSON.stringify({ action: "load", xml: "<mxGraphModel><root><mxCell id='0'/><mxCell id='1' parent='0'/></root></mxGraphModel>", autosave: 1 }), "http://localhost:8080");
      }
      break;
    case "save":
      sourceWindow.postMessage(JSON.stringify({ action: "export", format: "xmlsvg" }), "http://localhost:8080");
      break;
    case "export":
      await saveOrUpdateDrawioFile(app, view, msg.data);
      break;
    case "exit":
      console.log("\u{1F44B} User exited Draw.io");
      break;
  }
}
// Annotate the CommonJS export names for ESM import in node:
0 && (module.exports = {});
//# sourceMappingURL=data:application/json;base64,
