/*
THIS IS A GENERATED/BUNDLED FILE BY ESBUILD
if you want to view the source, please visit the github repository of this plugin
*/

var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);

// main.ts
var main_exports = {};
__export(main_exports, {
  default: () => DrawioPlugin
});
module.exports = __toCommonJS(main_exports);
var import_obsidian9 = require("obsidian");

// consts.ts
var DRAWIOVIEW = "drawioview";

// views/drawioView.ts
var import_obsidian2 = require("obsidian");

// locales/en.json
var en_default = {
  DrawIoViewName: "draw.io editor",
  ribonIconTitle: "open draw.io editor",
  StartDrawioClientSever: "Draw.io server started on port",
  StopDrawioClinetServer: "Draw.io server stopped"
};

// locales/ru.json
var ru_default = {
  DrawIoViewName: "\u0420\u0435\u0434\u0430\u043A\u0442\u043E\u0440 draw.io",
  ribonIconTitle: "\u041E\u0442\u043A\u0440\u044B\u0442\u044C \u0440\u0435\u0434\u0430\u043A\u0442\u043E\u0440 draw.io",
  StartDrawioClientSever: "\u0421\u0435\u0440\u0435\u0432\u0435\u0440 \u0437\u0430\u043F\u0443\u0441\u0442\u0438\u043B\u0430 \u043D\u0430 \u043F\u043E\u0440\u0442\u0443",
  StopDrawioClinetServer: "\u0421\u0435\u0440\u0435\u0432\u0440 drawio \u043E\u0441\u0442\u0430\u043D\u043E\u0432\u043B\u0435\u043D"
};

// locales/i18n.ts
var locales = {
  en: en_default,
  ru: ru_default
};
var currentLocale = "en";
var translations = en_default;
function setLocale(locale) {
  currentLocale = locale in locales ? locale : "en";
  translations = locales[currentLocale];
}
function t(key) {
  return translations[key] || key;
}

// utils/folderExists.ts
var import_obsidian = require("obsidian");
function folderExists(app, path2) {
  const normalized = (0, import_obsidian.normalizePath)(path2);
  const folder = app.vault.getAbstractFileByPath(normalized);
  return folder instanceof import_obsidian.TFolder;
}

// views/drawioView.ts
var Drawioview = class extends import_obsidian2.ItemView {
  constructor(leaf, plugin) {
    super(leaf);
    this.iframe = null;
    this.plugin = plugin;
    this.messageHandler = this.listendrawiomessage.bind(this);
  }
  getViewType() {
    return DRAWIOVIEW;
  }
  getDisplayText() {
    return t("DrawIoViewName");
  }
  async onOpen() {
    const container = this.containerEl.children[1];
    container.empty();
    container.createEl("iframe", { attr: { id: "drawioiframe", src: `http://localhost:${this.plugin.settings.port}?embed=1&proto=json&ui=dark` } }).addClass("drawioIframe");
    this.iframe = document.getElementById("drawioiframe");
    window.addEventListener("message", this.messageHandler);
  }
  async listendrawiomessage(event) {
    var _a, _b, _c, _d;
    try {
      const msg = JSON.parse(event.data);
      switch (msg.event) {
        case "init":
          (_b = (_a = this.iframe) == null ? void 0 : _a.contentWindow) == null ? void 0 : _b.postMessage(JSON.stringify({
            action: "load",
            xml: "<mxGraphModel><root>...</root></mxGraphModel>",
            title: "example.drawio"
          }), `http://localhost:${this.plugin.settings.port}`);
          break;
        case "save":
          (_d = (_c = this.iframe) == null ? void 0 : _c.contentWindow) == null ? void 0 : _d.postMessage(JSON.stringify({
            action: "export",
            format: "xmlsvg",
            xml: 1
          }), `http://localhost:${this.plugin.settings.port}`);
          console.log("\u0414\u0438\u0430\u0433\u0440\u0430\u043C\u043C\u0430 \u0441\u043E\u0445\u0440\u0430\u043D\u0435\u043D\u0430:", msg);
          break;
        case "export": {
          const svgBase64 = msg.data;
          const svg64Data = svgBase64.replace(/^data:image\/svg\+xml;base64,/, "");
          const svgContent = atob(svg64Data);
          const now = new Date();
          const timestamp = `${now.getFullYear()}${(now.getMonth() + 1).toString().padStart(2, "0")}${now.getDate().toString().padStart(2, "0")}${now.getHours().toString().padStart(2, "0")}${now.getMinutes().toString().padStart(2, "0")}${now.getSeconds().toString().padStart(2, "0")}`;
          if (folderExists(this.app, this.plugin.settings.Folder)) {
            this.app.vault.create(`${this.plugin.settings.Folder}/drawio_${timestamp}.drawio.svg`, svgContent);
          } else {
            this.app.vault.create(`/drawio_${timestamp}.drawio.svg`, svgContent);
          }
          break;
        }
        case "exit":
          console.log("\u0420\u0435\u0434\u0430\u043A\u0442\u043E\u0440 \u0437\u0430\u043A\u0440\u044B\u0442");
          break;
      }
    } catch (e) {
      console.warn("\u041D\u0435\u043A\u043E\u0440\u0440\u0435\u043A\u0442\u043D\u044B\u0439 JSON \u0432 \u0441\u043E\u043E\u0431\u0449\u0435\u043D\u0438\u0438:", event.data);
    }
  }
  async onClose() {
    window.removeEventListener("message", this.messageHandler);
  }
};

// handlers/ServerStart.ts
var import_obsidian3 = require("obsidian");
var http = require("http");
var fs = require("fs");
var path = require("path");
function getDrawioPaths(app, manifestDir) {
  const vaultBasePath = app.vault.adapter.basePath;
  const pluginDir = path.join(vaultBasePath, manifestDir);
  const webAppPath = path.join(pluginDir, "webapp");
  return { vaultBasePath, pluginDir, webAppPath };
}
function serverStart(plugin, webAppPath, port) {
  return new Promise((resolve, reject) => {
    const server = http.createServer((req, res) => {
      const requestUrl = new URL(req.url || "", `http://${req.headers.host}`);
      const filePath = path.join(
        webAppPath,
        requestUrl.pathname === "/" ? "index.html" : requestUrl.pathname
      );
      if (!filePath.startsWith(webAppPath)) {
        res.writeHead(403, { "Content-Type": "text/plain" });
        res.end("403 Forbidden");
        return;
      }
      fs.readFile(filePath, (err, data) => {
        if (err) {
          if (err.code === "ENOENT") {
            res.writeHead(404, { "Content-Type": "text/plain" });
            res.end("404 Not Found");
          } else {
            res.writeHead(500, { "Content-Type": "text/plain" });
            res.end(`500 Internal Server Error: ${err.message}`);
          }
        } else {
          const ext = path.extname(filePath).toLowerCase();
          let contentType = "application/octet-stream";
          switch (ext) {
            case ".html":
              contentType = "text/html";
              break;
            case ".js":
              contentType = "application/javascript";
              break;
            case ".css":
              contentType = "text/css";
              break;
            case ".json":
              contentType = "application/json";
              break;
            case ".png":
              contentType = "image/png";
              break;
            case ".jpg":
              contentType = "image/jpeg";
              break;
            case ".gif":
              contentType = "image/gif";
              break;
            case ".svg":
              contentType = "image/svg+xml";
              break;
            case ".woff":
              contentType = "font/woff";
              break;
            case ".woff2":
              contentType = "font/woff2";
              break;
            case ".ttf":
              contentType = "font/ttf";
              break;
            case ".ico":
              contentType = "image/x-icon";
              break;
          }
          res.writeHead(200, { "Content-Type": contentType });
          res.end(data);
        }
      });
    });
    server.listen(port, () => {
      const port2 = plugin.settings.port;
      new import_obsidian3.Notice(`${t("StartDrawioClientSever")} ${port2}`);
      resolve(server);
    }).on("error", (err) => {
      if (err.code === "EADDRINUSE") {
        new import_obsidian3.Notice(`\u274C \u041F\u043E\u0440\u0442 ${port} \u0443\u0436\u0435 \u0437\u0430\u043D\u044F\u0442. \u0421\u0435\u0440\u0432\u0435\u0440 Draw.io \u043D\u0435 \u0437\u0430\u043F\u0443\u0449\u0435\u043D.`);
        console.error(`\u041F\u043E\u0440\u0442 ${port} \u0443\u0436\u0435 \u0437\u0430\u043D\u044F\u0442.`);
      } else {
        new import_obsidian3.Notice(`\u274C \u041D\u0435 \u0443\u0434\u0430\u043B\u043E\u0441\u044C \u0437\u0430\u043F\u0443\u0441\u0442\u0438\u0442\u044C \u0441\u0435\u0440\u0432\u0435\u0440 Draw.io: ${err.message}`);
        console.error(`\u041D\u0435 \u0443\u0434\u0430\u043B\u043E\u0441\u044C \u0437\u0430\u043F\u0443\u0441\u0442\u0438\u0442\u044C \u0441\u0435\u0440\u0432\u0435\u0440 Draw.io:`, err);
      }
      reject(err);
    });
  });
}
async function launchDrawioServerLogic(plugin) {
  if (plugin.isServerOpen)
    return;
  const PORT = plugin.settings.port;
  const { webAppPath } = getDrawioPaths(plugin.app, plugin.manifest.dir);
  try {
    plugin.isServerOpen = await serverStart(plugin, webAppPath, Number(PORT));
    await new Promise((res) => setTimeout(res, 1e3));
    console.log(plugin.settings.port);
  } catch (error) {
    plugin.isServerOpen = null;
  }
}

// settings/Settings.ts
var DEFAULT_SETTINGS = {
  port: "1717",
  centeringDiagram: true,
  percentSize: true,
  interactiveDiagram: true,
  Folder: "drawio",
  diagramSize: ""
};

// settings/Settings-tab.ts
var import_obsidian4 = require("obsidian");
var DrawioTab = class extends import_obsidian4.PluginSettingTab {
  constructor(app, plugin) {
    super(app, plugin);
    this.plugin = plugin;
  }
  display() {
    let { containerEl } = this;
    containerEl.empty();
    new import_obsidian4.Setting(containerEl).setName("Set port").setDesc("Set port").addText(
      (text) => text.setPlaceholder("1717").setValue(this.plugin.settings.port).onChange(async (value) => {
        this.plugin.settings.port = value;
        await this.plugin.saveSettings();
      })
    );
    new import_obsidian4.Setting(containerEl).setName("Centering Diagram").setDesc("If active all diagram will be position to center").addToggle(
      (toggle) => toggle.setValue(this.plugin.settings.centeringDiagram).onChange(async (value) => {
        this.plugin.settings.centeringDiagram = value;
        await this.plugin.saveSettings();
      })
    );
    new import_obsidian4.Setting(containerEl).setName("Percent size").setDesc("Percent Size").addToggle(
      (toggle) => toggle.setValue(this.plugin.settings.percentSize).onChange(async (value) => {
        this.plugin.settings.percentSize = value;
        await this.plugin.saveSettings();
      })
    );
    new import_obsidian4.Setting(containerEl).setName("Interactive diagrams").setDesc("Interactive diagrams").addToggle(
      (toggle) => toggle.setValue(this.plugin.settings.interactiveDiagram).onChange(async (value) => {
        this.plugin.settings.interactiveDiagram = value;
        await this.plugin.saveSettings();
      })
    );
    new import_obsidian4.Setting(containerEl).setName("Select folder").setDesc("Select folder that save diagrams").addDropdown(
      (dropdown) => {
        const folders = this.app.vault.getAllLoadedFiles().filter((file) => file instanceof import_obsidian4.TFolder);
        folders.forEach((folder) => {
          dropdown.addOption(folder.path, folder.path);
        });
        dropdown.setValue(this.plugin.settings.Folder);
        dropdown.onChange(async (value) => {
          this.plugin.settings.Folder = value;
          await this.plugin.saveSettings();
        });
      }
    );
    new import_obsidian4.Setting(containerEl).setName("diagram width").setDesc("Set default diagram size").addText(
      (text) => text.setPlaceholder("100%").setValue(this.plugin.settings.diagramSize).onChange(async (value) => {
        this.plugin.settings.diagramSize = value;
        await this.plugin.saveSettings();
      })
    );
  }
};

// utils/centeringDiagrams.ts
async function CenteringDiagrams(plugin) {
  if (!plugin.settings.centeringDiagram) {
    return;
  } else {
    plugin.registerMarkdownPostProcessor((el, ctx) => {
      const embeds = el.querySelectorAll('span.internal-embed[src$=".drawio.svg"]');
      embeds.forEach((embed) => {
        var _a;
        const wrapper = document.createElement("div");
        wrapper.style.textAlign = "center";
        wrapper.style.width = "100%";
        const img = embed.querySelector("img");
        if (img) {
          img.style.width = "100%";
          img.style.height = "auto";
          img.style.maxWidth = "100%";
        }
        if (embed.parentElement && embed.parentElement.tagName === "DIV")
          return;
        (_a = embed.parentElement) == null ? void 0 : _a.insertBefore(wrapper, embed);
        wrapper.appendChild(embed);
      });
    });
  }
  ;
}

// utils/DefaultDiagramSize.ts
async function DefaultDiagramSize(plugin) {
  if (!plugin.settings.percentSize) {
    return;
  } else {
    plugin.registerMarkdownPostProcessor((el, ctx) => {
      const embeds = el.querySelectorAll('span.internal-embed[src$=".drawio.svg"]');
      embeds.forEach((embed) => {
        const width = embed.getAttribute("alt");
        const percentpattern = /^(100|[1-9]?\d)%$/;
        if (percentpattern.test(width != null ? width : "")) {
          embed.setAttribute("width", width);
        }
      });
    });
  }
}

// handlers/getFileContent.ts
var import_obsidian5 = require("obsidian");

// utils/findFileByName.ts
function findFileByName(fileName, app) {
  const files = app.vault.getFiles();
  for (const file of files) {
    if (file.name === fileName) {
      return file;
    }
  }
  return null;
}

// handlers/getFileContent.ts
function getFileContent(element, app) {
  const filename = element.getAttribute("src");
  if (!filename)
    return null;
  const file = findFileByName(filename, app);
  return file instanceof import_obsidian5.TFile ? file : null;
}

// utils/interactiveDiagrams.ts
var import_obsidian6 = require("obsidian");
async function InteractiveDiagrams(plugin) {
  if (!plugin.settings.interactiveDiagram)
    return;
  plugin.registerMarkdownPostProcessor(async (el, ctx) => {
    const embeds = el.querySelectorAll('span.internal-embed[src$=".drawio.svg"]');
    for (const embed of embeds) {
      const file = getFileContent(embed, plugin.app);
      if (!(file instanceof import_obsidian6.TFile))
        continue;
      const data = await plugin.app.vault.read(file);
      const img = embed.querySelector("img");
      let imgSizee = null;
      if (img.hasAttribute("width")) {
        imgSizee = img.getAttribute("width");
      }
      if (img.getAttribute("alt").includes("%")) {
        imgSizee = img.getAttribute("alt");
      }
      const temp = document.createElement("div");
      temp.innerHTML = data;
      const svgElement = temp.querySelector("svg");
      if (!svgElement)
        continue;
      img.replaceWith(svgElement);
      if (imgSizee !== null && !imgSizee.includes("%")) {
        svgElement.setAttribute("width", imgSizee + "px");
        svgElement.setAttribute("height", "100%");
      } else if (imgSizee !== null) {
        svgElement.setAttribute("width", imgSizee);
        svgElement.setAttribute("height", "100%");
      }
      if (document.body.classList.contains("theme-light")) {
        svgElement.addClass("drawio-scheme-light");
      } else {
        svgElement.addClass("drawio-scheme-dark");
      }
      const links = svgElement.querySelectorAll("a");
      for (const link of links) {
        link.addClass("internal-link");
        const hrefLink = link.getAttribute("xlink:href");
        let cleanHref = hrefLink;
        const matchRound = hrefLink.match(/\[.*?\]\((.*?)\)/);
        if (matchRound) {
          cleanHref = matchRound[1];
        }
        const matchDoubleSquare = hrefLink.match(/\[\[(.*?)\]\]/);
        if (matchDoubleSquare) {
          cleanHref = matchDoubleSquare[1];
        }
        link.setAttribute("href", cleanHref);
      }
    }
  });
}

// handlers/findDiagramFileUnderCursor.ts
var import_obsidian7 = require("obsidian");
function findDiagramFileUnderCursor(app, editor, view) {
  var _a, _b;
  const cursor = editor.getCursor();
  const line = editor.getLine(cursor.line);
  const linkRegex = /!\[\[([^|\]]+\.(?:drawio\.svg|drawio))[^\]]*\]\]/g;
  let execMatch;
  while ((execMatch = linkRegex.exec(line)) !== null) {
    const fullMatchText = execMatch[0];
    const linkText = execMatch[1];
    const startIndex = execMatch.index;
    const endIndex = startIndex + fullMatchText.length;
    if (cursor.ch >= startIndex && cursor.ch <= endIndex) {
      const linkedFile = app.metadataCache.getFirstLinkpathDest(linkText, (_b = (_a = view.file) == null ? void 0 : _a.path) != null ? _b : "");
      if (linkedFile instanceof import_obsidian7.TFile) {
        return linkedFile;
      }
    }
  }
  return null;
}

// views/modalDrawio.ts
var import_obsidian8 = require("obsidian");

// utils/forceMarkdownViewUpdate.ts
async function forceMarkdownViewUpdate(app, file) {
  var _a, _b;
  if (!file) {
    console.warn("forceMarkdownViewUpdate: \u0412\u044B\u0437\u0432\u0430\u043D\u0430 \u0441 null \u0444\u0430\u0439\u043B\u043E\u043C. \u041D\u0435\u0432\u043E\u0437\u043C\u043E\u0436\u043D\u043E \u043E\u043F\u0440\u0435\u0434\u0435\u043B\u0438\u0442\u044C, \u0438\u0437\u043C\u0435\u043D\u0435\u043D\u0438\u044F \u043A\u0430\u043A\u043E\u0433\u043E \u0444\u0430\u0439\u043B\u0430 \u043E\u0442\u0441\u043B\u0435\u0436\u0438\u0432\u0430\u0442\u044C.");
    return;
  }
  const diagramFile = file;
  const leaves = app.workspace.getLeavesOfType("markdown");
  for (const leaf of leaves) {
    const mdView = leaf.view;
    if (!mdView || !mdView.file) {
      continue;
    }
    const currentViewFile = mdView.file;
    try {
      let needsRebuild = false;
      if (!currentViewFile || !currentViewFile.path) {
        console.warn(`forceMarkdownViewUpdate: currentViewFile \u0438\u043B\u0438 \u0435\u0433\u043E \u043F\u0443\u0442\u044C \u0441\u0442\u0430\u043B null/undefined \u0434\u043B\u044F \u043B\u0438\u0441\u0442\u0430 ${leaf}. \u041F\u0440\u043E\u043F\u0443\u0441\u043A\u0430\u0435\u043C \u043F\u0435\u0440\u0435\u0441\u0442\u0440\u043E\u0439\u043A\u0443.`);
        continue;
      }
      if (currentViewFile.path === diagramFile.path) {
        needsRebuild = true;
      } else {
        const fileContent = await app.vault.cachedRead(currentViewFile);
        if (fileContent.includes(diagramFile.name) || fileContent.includes(encodeURI(diagramFile.name))) {
          needsRebuild = true;
        }
      }
      if (needsRebuild) {
        if (typeof leaf.rebuildView === "function") {
          await leaf.rebuildView();
        } else {
          const viewState = leaf.getViewState();
          await leaf.setViewState({ type: "empty" });
          await leaf.setViewState(viewState);
        }
      }
    } catch (err) {
      const currentViewFilePathForLog = (_a = currentViewFile == null ? void 0 : currentViewFile.path) != null ? _a : "unknown file (no path)";
      const diagramFilePathForLog = (_b = diagramFile == null ? void 0 : diagramFile.path) != null ? _b : "unknown diagram path";
      console.warn(`\u041D\u0435 \u0443\u0434\u0430\u043B\u043E\u0441\u044C \u043E\u0431\u043D\u043E\u0432\u0438\u0442\u044C \u043F\u0440\u0435\u0434\u0441\u0442\u0430\u0432\u043B\u0435\u043D\u0438\u0435 \u0434\u043B\u044F ${currentViewFilePathForLog} \u043E\u0442\u043D\u043E\u0441\u0438\u0442\u0435\u043B\u044C\u043D\u043E \u0438\u0437\u043C\u0435\u043D\u0435\u043D\u0438\u0439 \u0432 ${diagramFilePathForLog}:`, err);
    }
  }
}

// views/modalDrawio.ts
var DrawioEmbedModal = class extends import_obsidian8.Modal {
  constructor(app, editor, plugin, fileToEdit = null) {
    super(app);
    this.currentFile = null;
    this.iframe = null;
    this.messageHandler = null;
    this.isEmptyDiagram = true;
    this.editor = editor;
    this.plugin = plugin;
    this.currentFile = fileToEdit;
    this.modalEl.addClass("drawio-embed-modal");
    const modalBg = this.containerEl.querySelector(".modal-bg");
    if (modalBg) {
      this.scope.register([], "Escape", () => false);
      modalBg.addEventListener("click", (e) => e.stopPropagation(), true);
    }
  }
  async onOpen() {
    const { contentEl } = this;
    contentEl.empty();
    this.titleEl.setText(this.currentFile ? `Edit Diagram: ${this.currentFile.name}` : "Create New Diagram");
    if (this.currentFile) {
      this.isEmptyDiagram = false;
    }
    const isDarkTheme = document.body.hasClass("theme-dark");
    const drawioUrl = `http://localhost:${this.plugin.settings.port}/?embed=1&proto=json&libraries=1&spin=1&splash=0` + (isDarkTheme ? `&ui=dark&dark=1` : `&ui=atlas`);
    this.iframe = contentEl.createEl("iframe", { attr: { src: drawioUrl } });
    this.iframe.addClass("drawioIframe");
    this.messageHandler = this.createMessageHandler();
    window.addEventListener("message", this.messageHandler);
  }
  async onClose() {
    const { contentEl } = this;
    contentEl.empty();
    if (this.messageHandler) {
      window.removeEventListener("message", this.messageHandler);
      this.messageHandler = null;
    }
    await this.handleModalCloseBasedOnContent();
    this.iframe = null;
    this.isEmptyDiagram = true;
    this.currentFile = null;
  }
  sendMessageToDrawio(message) {
    if (this.iframe && this.iframe.contentWindow) {
      this.iframe.contentWindow.postMessage(JSON.stringify(message), `http://localhost:${this.plugin.settings.port}`);
    }
  }
  async handleNewDiagramCreation() {
    const folderPath = this.plugin.settings.Folder;
    try {
      await this.app.vault.createFolder(folderPath);
    } catch (e) {
      if (!e.message.includes("Folder already exists")) {
        new import_obsidian8.Notice("\u274C Could not create folder for new diagram.");
        console.error("Error creating Drawio folder:", e);
        return null;
      }
    }
    const now = new Date();
    const timestamp = `${now.getFullYear()}${(now.getMonth() + 1).toString().padStart(2, "0")}${now.getDate().toString().padStart(2, "0")}${now.getHours().toString().padStart(2, "0")}${now.getMinutes().toString().padStart(2, "0")}${now.getSeconds().toString().padStart(2, "0")}`;
    const fileName = `diagram_${timestamp}.drawio.svg`;
    const fullPath = `${folderPath}/${fileName}`;
    const emptySvgContent = `<?xml version="1.0" encoding="UTF-8"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" version="1.1" width="1px" height="1px" viewBox="-0.5 -0.5 1 1" content="&lt;mxGraphModel&gt;&lt;root&gt;&lt;mxCell id=&quot;0&quot;/&gt;&lt;mxCell id=&quot;1&quot; parent=&quot;0&quot;/&gt;&lt;/root&gt;&lt;/mxGraphModel&gt;"><defs/><g/></svg>`;
    try {
      return await this.app.vault.create(fullPath, emptySvgContent);
    } catch (e) {
      new import_obsidian8.Notice(`\u274C Failed to create new diagram file: ${fullPath}`);
      console.error("Error creating new diagram file:", e);
      return null;
    }
  }
  createMessageHandler() {
    return async (event) => {
      if (event.origin !== `http://localhost:${this.plugin.settings.port}`)
        return;
      let msg;
      try {
        msg = typeof event.data === "string" ? JSON.parse(event.data) : event.data;
      } catch (e) {
        console.warn("Could not parse Draw.io message:", event.data, e);
        return;
      }
      switch (msg.event) {
        case "init":
          await this.handleInitMessage();
          break;
        case "save":
          this.sendMessageToDrawio({ action: "export", format: "xmlsvg", xml: 1, empty: 1 });
          break;
        case "export":
          await this.handleExportMessage(msg.data);
          break;
        case "change":
          this.handleChangeMessage(msg.xml);
          break;
        case "exit":
          this.close();
          break;
      }
    };
  }
  async handleInitMessage() {
    if (this.currentFile) {
      const fileContent = await this.app.vault.read(this.currentFile);
      this.sendMessageToDrawio({ action: "load", xml: fileContent, autosave: 1 });
    } else {
      const emptyXml = "<mxGraphModel><root><mxCell id='0'/><mxCell id='1' parent='0'/></root></mxGraphModel>";
      this.sendMessageToDrawio({ action: "load", xml: emptyXml, autosave: 1 });
    }
  }
  async handleExportMessage(svgDataUri) {
    await this.saveDiagramFromModal(svgDataUri);
  }
  handleChangeMessage(xmlContent) {
    const baseEmptyXml = "<mxGraphModel><root><mxCell id='0'/><mxCell id='1' parent='0'/></root></mxGraphModel>";
    this.isEmptyDiagram = !xmlContent || xmlContent === baseEmptyXml;
  }
  async saveDiagramFromModal(svgDataUri) {
    let contentToSave;
    try {
      contentToSave = this.decodeSvgDataUri(svgDataUri);
    } catch (e) {
      new import_obsidian8.Notice(`\u274C Failed to decode SVG content: ${e.message}`);
      return;
    }
    if (this.isSvgContentActuallyEmpty(contentToSave)) {
      new import_obsidian8.Notice("Diagram is empty. Nothing to save.");
      return;
    }
    if (!this.currentFile) {
      const newFile = await this.handleNewDiagramCreation();
      if (!newFile)
        return;
      this.currentFile = newFile;
      this.titleEl.setText(`Edit Diagram: ${this.currentFile.name}`);
      const defaultWidth = this.plugin.settings.diagramSize;
      const embedLink = (defaultWidth == null ? void 0 : defaultWidth.trim()) ? `![[${this.currentFile.path}|${defaultWidth.trim()}]]` : `![[${this.currentFile.path}]]`;
      setTimeout(() => {
        this.editor.replaceSelection(embedLink);
      }, 500);
    }
    try {
      await this.app.vault.modify(this.currentFile, contentToSave);
      new import_obsidian8.Notice(`\u{1F4BE} Diagram saved: ${this.currentFile.path}`);
      forceMarkdownViewUpdate(this.app, this.currentFile);
      this.isEmptyDiagram = false;
    } catch (e) {
      new import_obsidian8.Notice(`\u274C Failed to save diagram: ${this.currentFile.path}`);
      console.error("Error saving diagram:", e);
    }
  }
  decodeSvgDataUri(svgDataUri) {
    if (svgDataUri.startsWith("data:image/svg+xml;base64,")) {
      const base64Part = svgDataUri.split(",")[1];
      return Buffer.from(base64Part, "base64").toString("utf-8");
    } else if (svgDataUri.startsWith("data:image/svg+xml,")) {
      return decodeURIComponent(svgDataUri.split(",")[1]);
    } else {
      throw new Error("Invalid SVG data format received.");
    }
  }
  isSvgContentActuallyEmpty(content) {
    const emptyDrawioXmlInSvgContent = `content="&lt;mxGraphModel&gt;&lt;root&gt;&lt;mxCell id=&quot;0&quot;/&gt;&lt;mxCell id=&quot;1&quot; parent=&quot;0&quot;/&gt;&lt;/root&gt;&lt;/mxGraphModel&gt;"`;
    return content.includes(emptyDrawioXmlInSvgContent) && (content.match(/<g\b[^>]*>/g) || []).length === 1;
  }
  async handleModalCloseBasedOnContent() {
    if (!this.currentFile)
      return;
    if (this.isEmptyDiagram) {
      try {
        const pathToDelete = this.currentFile.path;
        await this.app.fileManager.trashFile(this.currentFile);
        const editorContent = this.editor.getValue();
        const linkToDeleteSimple = `![[${pathToDelete}]]`;
        const linkToDeleteEncoded = `![[${encodeURI(pathToDelete)}]]`;
        let finalContent = editorContent.replace(linkToDeleteSimple, "");
        const linkWithModifierRegex = new RegExp(`!\\[\\[${pathToDelete.replace(/[-\/\\^$*+?.()|[\]{}]/g, "\\$&")}\\|[^\\]]+\\]\\]`, "g");
        finalContent = finalContent.replace(linkWithModifierRegex, "");
        if (finalContent !== editorContent) {
          this.editor.setValue(finalContent);
        }
      } catch (e) {
        if (!(e instanceof Error && e.message.toLowerCase().includes("file already deleted"))) {
          new import_obsidian8.Notice(`\u274C Failed to delete empty diagram file: ${this.currentFile.path}`);
        }
      }
    }
  }
};

// main.ts
var DrawioPlugin = class extends import_obsidian9.Plugin {
  constructor() {
    super(...arguments);
    this.isServerOpen = null;
  }
  async onload() {
    await this.loadSettings();
    this.addSettingTab(new DrawioTab(this.app, this));
    this.registerView(
      DRAWIOVIEW,
      (leaf) => new Drawioview(leaf, this)
    );
    const userLang = (window.localStorage.getItem("language") || "en").split("-")[0];
    setLocale(userLang);
    this.addRibbonIcon("dice", t("ribonIconTitle"), async () => {
      this.activateView();
      await launchDrawioServerLogic(this);
    });
    await CenteringDiagrams(this);
    await DefaultDiagramSize(this);
    await InteractiveDiagrams(this);
    this.registerEvent(
      this.app.workspace.on("editor-menu", (menu, editor, view) => {
        const fileToEdit = findDiagramFileUnderCursor(this.app, editor, view);
        const openDrawioModal = async (file) => {
          await launchDrawioServerLogic(this);
          new DrawioEmbedModal(this.app, editor, this, file).open();
        };
        if (fileToEdit) {
          menu.addItem((item) => {
            item.setTitle(`Edit ${fileToEdit.basename}`).setIcon("pencil").setSection("drawio-actions").onClick(() => openDrawioModal(fileToEdit));
          });
        } else {
          menu.addItem((item) => {
            item.setTitle("Embed New Draw.io Diagram").setIcon("shapes").setSection("drawio-actions").onClick(() => openDrawioModal());
          });
        }
      })
    );
  }
  async loadSettings() {
    this.settings = Object.assign({}, DEFAULT_SETTINGS, await this.loadData());
  }
  async saveSettings() {
    await this.saveData(this.settings);
  }
  async onunload() {
    if (this.isServerOpen) {
      this.isServerOpen.close(() => {
        new import_obsidian9.Notice(t("StopDrawioClinetServer"));
        this.isServerOpen = null;
      });
    }
  }
  async activateView() {
    const leaf = this.app.workspace.getLeaf(false);
    if (leaf) {
      await leaf.setViewState({
        type: DRAWIOVIEW,
        active: true
      });
      this.app.workspace.revealLeaf(leaf);
    }
  }
};
//# sourceMappingURL=data:application/json;base64,
