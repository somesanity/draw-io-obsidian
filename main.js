/*
THIS IS A GENERATED/BUNDLED FILE BY ESBUILD
if you want to view the source, please visit the github repository of this plugin
*/

var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);

// main.ts
var main_exports = {};
__export(main_exports, {
  default: () => DrawioPlugin
});
module.exports = __toCommonJS(main_exports);
var import_obsidian3 = require("obsidian");

// consts.ts
var DRAWIOVIEW = "drawioview";

// views/drawioView.ts
var import_obsidian = require("obsidian");

// locales/en.json
var en_default = {
  DrawIoViewName: "draw.io editor",
  ribonIconTitle: "open draw.io editor",
  StartDrawioClientSever: "Draw.io server started on port",
  StopDrawioClinetServer: "Draw.io server stopped"
};

// locales/ru.json
var ru_default = {
  DrawIoViewName: "\u0420\u0435\u0434\u0430\u043A\u0442\u043E\u0440 draw.io",
  ribonIconTitle: "\u041E\u0442\u043A\u0440\u044B\u0442\u044C \u0440\u0435\u0434\u0430\u043A\u0442\u043E\u0440 draw.io",
  StartDrawioClientSever: "\u0421\u0435\u0440\u0435\u0432\u0435\u0440 \u0437\u0430\u043F\u0443\u0441\u0442\u0438\u043B\u0430 \u043D\u0430 \u043F\u043E\u0440\u0442\u0443",
  StopDrawioClinetServer: "\u0421\u0435\u0440\u0435\u0432\u0440 drawio \u043E\u0441\u0442\u0430\u043D\u043E\u0432\u043B\u0435\u043D"
};

// locales/i18n.ts
var locales = {
  en: en_default,
  ru: ru_default
};
var currentLocale = "en";
var translations = en_default;
function setLocale(locale) {
  currentLocale = locale in locales ? locale : "en";
  translations = locales[currentLocale];
}
function t(key) {
  return translations[key] || key;
}

// views/drawioView.ts
var Drawioview = class extends import_obsidian.ItemView {
  constructor(leaf) {
    super(leaf);
  }
  getViewType() {
    return DRAWIOVIEW;
  }
  getDisplayText() {
    return t("DrawIoViewName");
  }
  async onOpen() {
    const container = this.containerEl.children[1];
    container.empty();
    container.createEl("iframe", { attr: { src: "http://localhost:3000" } }).addClass("drawioIframe");
  }
  async onClose() {
  }
};

// handlers/ServerStart.ts
var import_obsidian2 = require("obsidian");
var http = require("http");
var fs = require("fs");
var path = require("path");
var url = require("url");
var PORT = 3e3;
function getDrawioPaths(app, manifestDir) {
  const vaultBasePath = app.vault.adapter.basePath;
  const pluginDir = path.join(vaultBasePath, manifestDir);
  const webAppPath = path.join(pluginDir, "webapp");
  return { vaultBasePath, pluginDir, webAppPath };
}
function serverStart(webAppPath, port) {
  return new Promise((resolve, reject) => {
    const server = http.createServer((req, res) => {
      const requestUrl = new URL(req.url || "", `http://${req.headers.host}`);
      const filePath = path.join(
        webAppPath,
        requestUrl.pathname === "/" ? "index.html" : requestUrl.pathname
      );
      if (!filePath.startsWith(webAppPath)) {
        res.writeHead(403, { "Content-Type": "text/plain" });
        res.end("403 Forbidden");
        return;
      }
      fs.readFile(filePath, (err, data) => {
        if (err) {
          if (err.code === "ENOENT") {
            res.writeHead(404, { "Content-Type": "text/plain" });
            res.end("404 Not Found");
          } else {
            res.writeHead(500, { "Content-Type": "text/plain" });
            res.end(`500 Internal Server Error: ${err.message}`);
          }
        } else {
          const ext = path.extname(filePath).toLowerCase();
          let contentType = "application/octet-stream";
          switch (ext) {
            case ".html":
              contentType = "text/html";
              break;
            case ".js":
              contentType = "application/javascript";
              break;
            case ".css":
              contentType = "text/css";
              break;
            case ".json":
              contentType = "application/json";
              break;
            case ".png":
              contentType = "image/png";
              break;
            case ".jpg":
              contentType = "image/jpeg";
              break;
            case ".gif":
              contentType = "image/gif";
              break;
            case ".svg":
              contentType = "image/svg+xml";
              break;
            case ".woff":
              contentType = "font/woff";
              break;
            case ".woff2":
              contentType = "font/woff2";
              break;
            case ".ttf":
              contentType = "font/ttf";
              break;
            case ".ico":
              contentType = "image/x-icon";
              break;
          }
          res.writeHead(200, { "Content-Type": contentType });
          res.end(data);
        }
      });
    });
    server.listen(port, () => {
      new import_obsidian2.Notice(`${t("StartDrawioClientSever")} ${port}`);
      resolve(server);
    }).on("error", (err) => {
      if (err.code === "EADDRINUSE") {
        new import_obsidian2.Notice(`\u274C \u041F\u043E\u0440\u0442 ${port} \u0443\u0436\u0435 \u0437\u0430\u043D\u044F\u0442. \u0421\u0435\u0440\u0432\u0435\u0440 Draw.io \u043D\u0435 \u0437\u0430\u043F\u0443\u0449\u0435\u043D.`);
        console.error(`\u041F\u043E\u0440\u0442 ${port} \u0443\u0436\u0435 \u0437\u0430\u043D\u044F\u0442.`);
      } else {
        new import_obsidian2.Notice(`\u274C \u041D\u0435 \u0443\u0434\u0430\u043B\u043E\u0441\u044C \u0437\u0430\u043F\u0443\u0441\u0442\u0438\u0442\u044C \u0441\u0435\u0440\u0432\u0435\u0440 Draw.io: ${err.message}`);
        console.error(`\u041D\u0435 \u0443\u0434\u0430\u043B\u043E\u0441\u044C \u0437\u0430\u043F\u0443\u0441\u0442\u0438\u0442\u044C \u0441\u0435\u0440\u0432\u0435\u0440 Draw.io:`, err);
      }
      reject(err);
    });
  });
}
async function launchDrawioServerLogic(plugin) {
  if (plugin.isServerOpen)
    return;
  const { webAppPath } = getDrawioPaths(plugin.app, plugin.manifest.dir);
  try {
    plugin.isServerOpen = await serverStart(webAppPath, PORT);
    await new Promise((res) => setTimeout(res, 1e3));
  } catch (error) {
    plugin.isServerOpen = null;
  }
}

// main.ts
var DrawioPlugin = class extends import_obsidian3.Plugin {
  constructor() {
    super(...arguments);
    this.isServerOpen = null;
  }
  async onload() {
    this.registerView(
      DRAWIOVIEW,
      (leaf) => new Drawioview(leaf)
    );
    const userLang = (window.localStorage.getItem("language") || "en").split("-")[0];
    setLocale(userLang);
    this.addRibbonIcon("dice", t("ribonIconTitle"), async () => {
      this.activateView();
      await launchDrawioServerLogic(this);
    });
  }
  async onunload() {
    if (this.isServerOpen) {
      this.isServerOpen.close(() => {
        new import_obsidian3.Notice("\u{1F6D1} Draw.io server stopped");
        this.isServerOpen = null;
      });
    }
  }
  async activateView() {
    const leaf = this.app.workspace.getLeaf(false);
    if (leaf) {
      await leaf.setViewState({
        type: DRAWIOVIEW,
        active: true
      });
      this.app.workspace.revealLeaf(leaf);
    }
  }
};
//# sourceMappingURL=data:application/json;base64,ewogICJ2ZXJzaW9uIjogMywKICAic291cmNlcyI6IFsibWFpbi50cyIsICJjb25zdHMudHMiLCAidmlld3MvZHJhd2lvVmlldy50cyIsICJsb2NhbGVzL2VuLmpzb24iLCAibG9jYWxlcy9ydS5qc29uIiwgImxvY2FsZXMvaTE4bi50cyIsICJoYW5kbGVycy9TZXJ2ZXJTdGFydC50cyJdLAogICJzb3VyY2VzQ29udGVudCI6IFsiaW1wb3J0IHsgTm90aWNlLCBQbHVnaW4sIFdvcmtzcGFjZUxlYWYgfSBmcm9tICdvYnNpZGlhbic7XG5cbmltcG9ydCB7IERSQVdJT1ZJRVcgfSBmcm9tICdjb25zdHMnO1xuaW1wb3J0IHsgRHJhd2lvdmlldyB9IGZyb20gJ3ZpZXdzL2RyYXdpb1ZpZXcnO1xuaW1wb3J0IHsgc2V0TG9jYWxlLCB0IH0gZnJvbSAnbG9jYWxlcy9pMThuJztcbmltcG9ydCB7IFNlcnZlciB9IGZyb20gJ25vZGU6aHR0cCc7XG5pbXBvcnQgeyBsYXVuY2hEcmF3aW9TZXJ2ZXJMb2dpYyB9IGZyb20gJ2hhbmRsZXJzL1NlcnZlclN0YXJ0JztcblxuZXhwb3J0IGRlZmF1bHQgY2xhc3MgRHJhd2lvUGx1Z2luIGV4dGVuZHMgUGx1Z2luIHtcblxuXHRpc1NlcnZlck9wZW46IFNlcnZlciB8IG51bGwgPSBudWxsO1xuXG4gIGFzeW5jIG9ubG9hZCgpIHtcblx0dGhpcy5yZWdpc3RlclZpZXcoXG5cdFx0RFJBV0lPVklFVyxcblx0XHQobGVhZikgPT4gbmV3IERyYXdpb3ZpZXcobGVhZikgXG5cdClcblxuXHRjb25zdCB1c2VyTGFuZyA9ICh3aW5kb3cubG9jYWxTdG9yYWdlLmdldEl0ZW0oJ2xhbmd1YWdlJykgfHwgJ2VuJykuc3BsaXQoJy0nKVswXTtcblx0c2V0TG9jYWxlKHVzZXJMYW5nKTtcblxuXHR0aGlzLmFkZFJpYmJvbkljb24oJ2RpY2UnLCB0KFwicmlib25JY29uVGl0bGVcIiksIGFzeW5jICgpID0+IHtcblx0XHR0aGlzLmFjdGl2YXRlVmlldygpXG5cdFx0YXdhaXQgbGF1bmNoRHJhd2lvU2VydmVyTG9naWModGhpcylcblx0fSkgXG4gIH1cblxuICBhc3luYyBvbnVubG9hZCgpIHtcblx0aWYgKHRoaXMuaXNTZXJ2ZXJPcGVuKSB7XG4gICAgICAgIHRoaXMuaXNTZXJ2ZXJPcGVuLmNsb3NlKCgpID0+IHtcbiAgICAgICAgICAgIG5ldyBOb3RpY2UoXCJcdUQ4M0RcdURFRDEgRHJhdy5pbyBzZXJ2ZXIgc3RvcHBlZFwiKTtcbiAgICAgICAgICAgIHRoaXMuaXNTZXJ2ZXJPcGVuID0gbnVsbDtcbiAgICAgICAgfSk7XG4gICAgfVxuICB9XG5cbiAgYXN5bmMgYWN0aXZhdGVWaWV3KCkge1xuXHRjb25zdCBsZWFmID0gdGhpcy5hcHAud29ya3NwYWNlLmdldExlYWYoZmFsc2UpO1xuXHRpZihsZWFmKSB7XG5cdFx0YXdhaXQgbGVhZi5zZXRWaWV3U3RhdGUoe1xuXHRcdHR5cGU6IERSQVdJT1ZJRVcsXG5cdFx0YWN0aXZlOiB0cnVlLFxuICAgIH0pO1xuICAgIHRoaXMuYXBwLndvcmtzcGFjZS5yZXZlYWxMZWFmKGxlYWYpO1xuXHR9XG4gIH1cbn0iLCAiZXhwb3J0IGNvbnN0IERSQVdJT1ZJRVcgPSAnZHJhd2lvdmlldyc7IiwgImltcG9ydCB7IEl0ZW1WaWV3LCBXb3Jrc3BhY2VMZWFmIH0gZnJvbSAnb2JzaWRpYW4nO1xyXG5cclxuaW1wb3J0IHsgRFJBV0lPVklFVyB9IGZyb20gJ2NvbnN0cyc7XHJcbmltcG9ydCB7IHQgfSBmcm9tICdsb2NhbGVzL2kxOG4nO1xyXG5cclxuZXhwb3J0IGNsYXNzIERyYXdpb3ZpZXcgZXh0ZW5kcyBJdGVtVmlldyB7XHJcbiAgY29uc3RydWN0b3IobGVhZjogV29ya3NwYWNlTGVhZikge1xyXG4gICAgc3VwZXIobGVhZik7XHJcbiAgfVxyXG5cclxuICBnZXRWaWV3VHlwZSgpIHtcclxuICAgIHJldHVybiBEUkFXSU9WSUVXO1xyXG4gIH1cclxuXHJcbiAgZ2V0RGlzcGxheVRleHQoKSB7XHJcbiAgICByZXR1cm4gdChcIkRyYXdJb1ZpZXdOYW1lXCIpO1xyXG4gIH1cclxuXHJcbiAgYXN5bmMgb25PcGVuKCkge1xyXG4gICAgY29uc3QgY29udGFpbmVyID0gdGhpcy5jb250YWluZXJFbC5jaGlsZHJlblsxXTtcclxuICAgIGNvbnRhaW5lci5lbXB0eSgpO1xyXG4gICAgY29udGFpbmVyLmNyZWF0ZUVsKCdpZnJhbWUnLCB7YXR0cjoge3NyYzogJ2h0dHA6Ly9sb2NhbGhvc3Q6MzAwMCd9fSkuYWRkQ2xhc3MoJ2RyYXdpb0lmcmFtZScpXHJcbiAgfVxyXG5cclxuICBhc3luYyBvbkNsb3NlKCkge1xyXG4gICAgLy8gTm90aGluZyB0byBjbGVhbiB1cC5cclxuICB9XHJcbn0iLCAie1xyXG4gICAgXCJEcmF3SW9WaWV3TmFtZVwiOiBcImRyYXcuaW8gZWRpdG9yXCIsXHJcbiAgICBcInJpYm9uSWNvblRpdGxlXCI6IFwib3BlbiBkcmF3LmlvIGVkaXRvclwiLFxyXG4gICAgXCJTdGFydERyYXdpb0NsaWVudFNldmVyXCI6IFwiRHJhdy5pbyBzZXJ2ZXIgc3RhcnRlZCBvbiBwb3J0XCIsXHJcbiAgICBcIlN0b3BEcmF3aW9DbGluZXRTZXJ2ZXJcIjogXCJEcmF3LmlvIHNlcnZlciBzdG9wcGVkXCJcclxufVxyXG4iLCAie1xyXG4gICAgXCJEcmF3SW9WaWV3TmFtZVwiOiBcIlx1MDQyMFx1MDQzNVx1MDQzNFx1MDQzMFx1MDQzQVx1MDQ0Mlx1MDQzRVx1MDQ0MCBkcmF3LmlvXCIsXHJcbiAgICBcInJpYm9uSWNvblRpdGxlXCI6IFwiXHUwNDFFXHUwNDQyXHUwNDNBXHUwNDQwXHUwNDRCXHUwNDQyXHUwNDRDIFx1MDQ0MFx1MDQzNVx1MDQzNFx1MDQzMFx1MDQzQVx1MDQ0Mlx1MDQzRVx1MDQ0MCBkcmF3LmlvXCIsXHJcbiAgICBcIlN0YXJ0RHJhd2lvQ2xpZW50U2V2ZXJcIjogXCJcdTA0MjFcdTA0MzVcdTA0NDBcdTA0MzVcdTA0MzJcdTA0MzVcdTA0NDAgXHUwNDM3XHUwNDMwXHUwNDNGXHUwNDQzXHUwNDQxXHUwNDQyXHUwNDM4XHUwNDNCXHUwNDMwIFx1MDQzRFx1MDQzMCBcdTA0M0ZcdTA0M0VcdTA0NDBcdTA0NDJcdTA0NDNcIixcclxuICAgIFwiU3RvcERyYXdpb0NsaW5ldFNlcnZlclwiOiBcIlx1MDQyMVx1MDQzNVx1MDQ0MFx1MDQzNVx1MDQzMlx1MDQ0MCBkcmF3aW8gXHUwNDNFXHUwNDQxXHUwNDQyXHUwNDMwXHUwNDNEXHUwNDNFXHUwNDMyXHUwNDNCXHUwNDM1XHUwNDNEXCJcclxufVxyXG4iLCAiaW1wb3J0IGVuIGZyb20gJy4vZW4uanNvbic7XHJcbmltcG9ydCBydSBmcm9tICcuL3J1Lmpzb24nO1xyXG5cclxudHlwZSBUcmFuc2xhdGlvbnMgPSB0eXBlb2YgZW47XHJcblxyXG5jb25zdCBsb2NhbGVzOiBSZWNvcmQ8c3RyaW5nLCBUcmFuc2xhdGlvbnM+ID0ge1xyXG4gIGVuLFxyXG4gIHJ1LFxyXG59O1xyXG5cclxubGV0IGN1cnJlbnRMb2NhbGU6IHN0cmluZyA9IFwiZW5cIjtcclxubGV0IHRyYW5zbGF0aW9uczogVHJhbnNsYXRpb25zID0gZW47XHJcblxyXG5leHBvcnQgZnVuY3Rpb24gc2V0TG9jYWxlKGxvY2FsZTogc3RyaW5nKSB7XHJcbiAgY3VycmVudExvY2FsZSA9IGxvY2FsZSBpbiBsb2NhbGVzID8gbG9jYWxlIDogXCJlblwiO1xyXG4gIHRyYW5zbGF0aW9ucyA9IGxvY2FsZXNbY3VycmVudExvY2FsZV07XHJcbn1cclxuXHJcbmV4cG9ydCBmdW5jdGlvbiB0KGtleToga2V5b2YgVHJhbnNsYXRpb25zKTogc3RyaW5nIHtcclxuICByZXR1cm4gdHJhbnNsYXRpb25zW2tleV0gfHwga2V5O1xyXG59IiwgImltcG9ydCB7IEluY29taW5nTWVzc2FnZSwgU2VydmVyLCBTZXJ2ZXJSZXNwb25zZSB9IGZyb20gXCJodHRwXCI7XHJcbmltcG9ydCB7IHQgfSBmcm9tIFwibG9jYWxlcy9pMThuXCI7XHJcbmltcG9ydCBEcmF3aW9QbHVnaW4gZnJvbSBcIm1haW5cIjtcclxuaW1wb3J0IHsgQXBwLCBOb3RpY2UgfSBmcm9tIFwib2JzaWRpYW5cIjtcclxuXHJcbmNvbnN0IGh0dHAgPSByZXF1aXJlKCdodHRwJyk7XHJcbmNvbnN0IGZzID0gcmVxdWlyZSgnZnMnKTtcclxuY29uc3QgcGF0aCA9IHJlcXVpcmUoJ3BhdGgnKTtcclxuXHJcbmNvbnN0IHVybCA9IHJlcXVpcmUoJ3VybCcpO1xyXG5cclxuY29uc3QgUE9SVCA9IDMwMDA7XHJcblxyXG5mdW5jdGlvbiBnZXREcmF3aW9QYXRocyhhcHA6IEFwcCwgbWFuaWZlc3REaXI6IHN0cmluZykge1xyXG4gICAgY29uc3QgdmF1bHRCYXNlUGF0aCA9IChhcHAudmF1bHQuYWRhcHRlciBhcyBhbnkpLmJhc2VQYXRoIGFzIHN0cmluZztcclxuICAgIGNvbnN0IHBsdWdpbkRpciA9IHBhdGguam9pbih2YXVsdEJhc2VQYXRoLCBtYW5pZmVzdERpcik7XHJcbiAgICBjb25zdCB3ZWJBcHBQYXRoID0gcGF0aC5qb2luKHBsdWdpbkRpciwgXCJ3ZWJhcHBcIik7XHJcbiAgICByZXR1cm4geyB2YXVsdEJhc2VQYXRoLCBwbHVnaW5EaXIsIHdlYkFwcFBhdGggfTtcclxufVxyXG5cclxuZnVuY3Rpb24gc2VydmVyU3RhcnQod2ViQXBwUGF0aDogc3RyaW5nLCBwb3J0OiBudW1iZXIpOiBQcm9taXNlPFNlcnZlcj4ge1xyXG4gICAgcmV0dXJuIG5ldyBQcm9taXNlKChyZXNvbHZlLCByZWplY3QpID0+IHtcclxuICAgICAgICBjb25zdCBzZXJ2ZXIgPSBodHRwLmNyZWF0ZVNlcnZlcigocmVxOiBJbmNvbWluZ01lc3NhZ2UsIHJlczogU2VydmVyUmVzcG9uc2UpID0+IHtcclxuICAgICAgICAgICAgY29uc3QgcmVxdWVzdFVybCA9IG5ldyBVUkwocmVxLnVybCB8fCAnJywgYGh0dHA6Ly8ke3JlcS5oZWFkZXJzLmhvc3R9YCk7XHJcbiAgICAgICAgICAgIGNvbnN0IGZpbGVQYXRoID0gcGF0aC5qb2luKFxyXG4gICAgICAgICAgICAgIHdlYkFwcFBhdGgsXHJcbiAgICAgICAgICAgICAgcmVxdWVzdFVybC5wYXRobmFtZSA9PT0gJy8nID8gJ2luZGV4Lmh0bWwnIDogcmVxdWVzdFVybC5wYXRobmFtZVxyXG4gICAgICAgICAgICApO1xyXG5cclxuICAgICAgICAgICAgaWYgKCFmaWxlUGF0aC5zdGFydHNXaXRoKHdlYkFwcFBhdGgpKSB7XHJcbiAgICAgICAgICAgICAgICByZXMud3JpdGVIZWFkKDQwMywgeyAnQ29udGVudC1UeXBlJzogJ3RleHQvcGxhaW4nIH0pO1xyXG4gICAgICAgICAgICAgICAgcmVzLmVuZCgnNDAzIEZvcmJpZGRlbicpO1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuO1xyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICBmcy5yZWFkRmlsZShmaWxlUGF0aCwgKGVycjogTm9kZUpTLkVycm5vRXhjZXB0aW9uIHwgbnVsbCwgZGF0YTogc3RyaW5nKSA9PiB7XHJcbiAgICAgICAgICAgICAgICBpZiAoZXJyKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKGVyci5jb2RlID09PSAnRU5PRU5UJykge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICByZXMud3JpdGVIZWFkKDQwNCwgeyAnQ29udGVudC1UeXBlJzogJ3RleHQvcGxhaW4nIH0pO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICByZXMuZW5kKCc0MDQgTm90IEZvdW5kJyk7XHJcbiAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgcmVzLndyaXRlSGVhZCg1MDAsIHsgJ0NvbnRlbnQtVHlwZSc6ICd0ZXh0L3BsYWluJyB9KTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgcmVzLmVuZChgNTAwIEludGVybmFsIFNlcnZlciBFcnJvcjogJHtlcnIubWVzc2FnZX1gKTtcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IGV4dCA9IHBhdGguZXh0bmFtZShmaWxlUGF0aCkudG9Mb3dlckNhc2UoKTtcclxuICAgICAgICAgICAgICAgICAgICBsZXQgY29udGVudFR5cGUgPSAnYXBwbGljYXRpb24vb2N0ZXQtc3RyZWFtJztcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgc3dpdGNoIChleHQpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgY2FzZSAnLmh0bWwnOiBjb250ZW50VHlwZSA9ICd0ZXh0L2h0bWwnOyBicmVhaztcclxuICAgICAgICAgICAgICAgICAgICAgICAgY2FzZSAnLmpzJzogY29udGVudFR5cGUgPSAnYXBwbGljYXRpb24vamF2YXNjcmlwdCc7IGJyZWFrO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBjYXNlICcuY3NzJzogY29udGVudFR5cGUgPSAndGV4dC9jc3MnOyBicmVhaztcclxuICAgICAgICAgICAgICAgICAgICAgICAgY2FzZSAnLmpzb24nOiBjb250ZW50VHlwZSA9ICdhcHBsaWNhdGlvbi9qc29uJzsgYnJlYWs7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGNhc2UgJy5wbmcnOiBjb250ZW50VHlwZSA9ICdpbWFnZS9wbmcnOyBicmVhaztcclxuICAgICAgICAgICAgICAgICAgICAgICAgY2FzZSAnLmpwZyc6IGNvbnRlbnRUeXBlID0gJ2ltYWdlL2pwZWcnOyBicmVhaztcclxuICAgICAgICAgICAgICAgICAgICAgICAgY2FzZSAnLmdpZic6IGNvbnRlbnRUeXBlID0gJ2ltYWdlL2dpZic7IGJyZWFrO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBjYXNlICcuc3ZnJzogY29udGVudFR5cGUgPSAnaW1hZ2Uvc3ZnK3htbCc7IGJyZWFrO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBjYXNlICcud29mZic6IGNvbnRlbnRUeXBlID0gJ2ZvbnQvd29mZic7IGJyZWFrO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBjYXNlICcud29mZjInOiBjb250ZW50VHlwZSA9ICdmb250L3dvZmYyJzsgYnJlYWs7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGNhc2UgJy50dGYnOiBjb250ZW50VHlwZSA9ICdmb250L3R0Zic7IGJyZWFrO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBjYXNlICcuaWNvJzogY29udGVudFR5cGUgPSAnaW1hZ2UveC1pY29uJzsgYnJlYWs7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIHJlcy53cml0ZUhlYWQoMjAwLCB7ICdDb250ZW50LVR5cGUnOiBjb250ZW50VHlwZSB9KTtcclxuICAgICAgICAgICAgICAgICAgICByZXMuZW5kKGRhdGEpO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9KTtcclxuICAgICAgICB9KTtcclxuXHJcbiAgICAgICAgc2VydmVyLmxpc3Rlbihwb3J0LCAoKSA9PiB7XHJcbiAgICAgICAgICAgIG5ldyBOb3RpY2UoYCR7dChcIlN0YXJ0RHJhd2lvQ2xpZW50U2V2ZXJcIil9ICR7cG9ydH1gKTtcclxuICAgICAgICAgICAgcmVzb2x2ZShzZXJ2ZXIpO1xyXG4gICAgICAgIH0pLm9uKCdlcnJvcicsIChlcnI6IGFueSkgPT4ge1xyXG4gICAgICAgICAgICBpZiAoZXJyLmNvZGUgPT09ICdFQUREUklOVVNFJykge1xyXG4gICAgICAgICAgICAgICAgbmV3IE5vdGljZShgXHUyNzRDIFx1MDQxRlx1MDQzRVx1MDQ0MFx1MDQ0MiAke3BvcnR9IFx1MDQ0M1x1MDQzNlx1MDQzNSBcdTA0MzdcdTA0MzBcdTA0M0RcdTA0NEZcdTA0NDIuIFx1MDQyMVx1MDQzNVx1MDQ0MFx1MDQzMlx1MDQzNVx1MDQ0MCBEcmF3LmlvIFx1MDQzRFx1MDQzNSBcdTA0MzdcdTA0MzBcdTA0M0ZcdTA0NDNcdTA0NDlcdTA0MzVcdTA0M0QuYCk7XHJcbiAgICAgICAgICAgICAgICBjb25zb2xlLmVycm9yKGBcdTA0MUZcdTA0M0VcdTA0NDBcdTA0NDIgJHtwb3J0fSBcdTA0NDNcdTA0MzZcdTA0MzUgXHUwNDM3XHUwNDMwXHUwNDNEXHUwNDRGXHUwNDQyLmApO1xyXG4gICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgbmV3IE5vdGljZShgXHUyNzRDIFx1MDQxRFx1MDQzNSBcdTA0NDNcdTA0MzRcdTA0MzBcdTA0M0JcdTA0M0VcdTA0NDFcdTA0NEMgXHUwNDM3XHUwNDMwXHUwNDNGXHUwNDQzXHUwNDQxXHUwNDQyXHUwNDM4XHUwNDQyXHUwNDRDIFx1MDQ0MVx1MDQzNVx1MDQ0MFx1MDQzMlx1MDQzNVx1MDQ0MCBEcmF3LmlvOiAke2Vyci5tZXNzYWdlfWApO1xyXG4gICAgICAgICAgICAgICAgY29uc29sZS5lcnJvcihgXHUwNDFEXHUwNDM1IFx1MDQ0M1x1MDQzNFx1MDQzMFx1MDQzQlx1MDQzRVx1MDQ0MVx1MDQ0QyBcdTA0MzdcdTA0MzBcdTA0M0ZcdTA0NDNcdTA0NDFcdTA0NDJcdTA0MzhcdTA0NDJcdTA0NEMgXHUwNDQxXHUwNDM1XHUwNDQwXHUwNDMyXHUwNDM1XHUwNDQwIERyYXcuaW86YCwgZXJyKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICByZWplY3QoZXJyKTtcclxuICAgICAgICB9KTtcclxuICAgIH0pO1xyXG59XHJcblxyXG5leHBvcnQgYXN5bmMgZnVuY3Rpb24gbGF1bmNoRHJhd2lvU2VydmVyTG9naWMocGx1Z2luOiBEcmF3aW9QbHVnaW4pOiBQcm9taXNlPHZvaWQ+IHtcclxuICAgIGlmIChwbHVnaW4uaXNTZXJ2ZXJPcGVuKSByZXR1cm47XHJcblxyXG4gICAgY29uc3QgeyB3ZWJBcHBQYXRoIH0gPSBnZXREcmF3aW9QYXRocyhwbHVnaW4uYXBwLCBwbHVnaW4ubWFuaWZlc3QuZGlyISk7XHJcblxyXG4gICAgdHJ5IHtcclxuICAgICAgICBwbHVnaW4uaXNTZXJ2ZXJPcGVuID0gYXdhaXQgc2VydmVyU3RhcnQod2ViQXBwUGF0aCwgUE9SVCk7XHJcbiAgICAgICAgYXdhaXQgbmV3IFByb21pc2UoKHJlcykgPT4gc2V0VGltZW91dChyZXMsIDEwMDApKTtcclxuICAgIH0gY2F0Y2ggKGVycm9yKSB7XHJcbiAgICAgICAgcGx1Z2luLmlzU2VydmVyT3BlbiA9IG51bGw7XHJcbiAgICB9XHJcbn0iXSwKICAibWFwcGluZ3MiOiAiOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUEsSUFBQUEsbUJBQThDOzs7QUNBdkMsSUFBTSxhQUFhOzs7QUNBMUIsc0JBQXdDOzs7QUNBeEM7QUFBQSxFQUNJLGdCQUFrQjtBQUFBLEVBQ2xCLGdCQUFrQjtBQUFBLEVBQ2xCLHdCQUEwQjtBQUFBLEVBQzFCLHdCQUEwQjtBQUM5Qjs7O0FDTEE7QUFBQSxFQUNJLGdCQUFrQjtBQUFBLEVBQ2xCLGdCQUFrQjtBQUFBLEVBQ2xCLHdCQUEwQjtBQUFBLEVBQzFCLHdCQUEwQjtBQUM5Qjs7O0FDQUEsSUFBTSxVQUF3QztBQUFBLEVBQzVDO0FBQUEsRUFDQTtBQUNGO0FBRUEsSUFBSSxnQkFBd0I7QUFDNUIsSUFBSSxlQUE2QjtBQUUxQixTQUFTLFVBQVUsUUFBZ0I7QUFDeEMsa0JBQWdCLFVBQVUsVUFBVSxTQUFTO0FBQzdDLGlCQUFlLFFBQVEsYUFBYTtBQUN0QztBQUVPLFNBQVMsRUFBRSxLQUFpQztBQUNqRCxTQUFPLGFBQWEsR0FBRyxLQUFLO0FBQzlCOzs7QUhmTyxJQUFNLGFBQU4sY0FBeUIseUJBQVM7QUFBQSxFQUN2QyxZQUFZLE1BQXFCO0FBQy9CLFVBQU0sSUFBSTtBQUFBLEVBQ1o7QUFBQSxFQUVBLGNBQWM7QUFDWixXQUFPO0FBQUEsRUFDVDtBQUFBLEVBRUEsaUJBQWlCO0FBQ2YsV0FBTyxFQUFFLGdCQUFnQjtBQUFBLEVBQzNCO0FBQUEsRUFFQSxNQUFNLFNBQVM7QUFDYixVQUFNLFlBQVksS0FBSyxZQUFZLFNBQVMsQ0FBQztBQUM3QyxjQUFVLE1BQU07QUFDaEIsY0FBVSxTQUFTLFVBQVUsRUFBQyxNQUFNLEVBQUMsS0FBSyx3QkFBdUIsRUFBQyxDQUFDLEVBQUUsU0FB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LHdCQUFPLHVLQUEwQyxJQUFJLFNBQVM7QUFDbEUsZ0JBQVEsTUFBTSxnS0FBd0MsR0FBRztBQUFBLE1BQzdEO0FBQ0EsYUFBTyxHQUFHO0FBQUEsSUFDZCxDQUFDO0FBQUEsRUFDTCxDQUFDO0FBQ0w7QUFFQSxlQUFzQix3QkFBd0IsUUFBcUM7QUFDL0UsTUFBSSxPQUFPO0FBQWM7QUFFekIsUUFBTSxFQUFFLFdBQVcsSUFBSSxlQUFlLE9BQU8sS0FBSyxPQUFPLFNBQVMsR0FBSTtBQUV0RSxNQUFJO0FBQ0EsV0FBTyxlQUFlLE1BQU0sWUFBWSxZQUFZLElBQUk7QUFDeEQsVUFBTSxJQUFJLFFBQVEsQ0FBQyxRQUFRLFdBQVcsS0FBSyxHQUFJLENBQUM7QUFBQSxFQUNwRCxTQUFTLE9BQVA7QUFDRSxXQUFPLGVBQWU7QUFBQSxFQUMxQjtBQUNKOzs7QU52RkEsSUFBcUIsZUFBckIsY0FBMEMsd0JBQU87QUFBQSxFQUFqRDtBQUFBO0FBRUMsd0JBQThCO0FBQUE7QUFBQSxFQUU3QixNQUFNLFNBQVM7QUFDaEIsU0FBSztBQUFBLE1BQ0o7QUFBQSxNQUNBLENBQUMsU0FBUyxJQUFJLFdBQVcsSUFBSTtBQUFBLElBQzlCO0FBRUEsVUFBTSxZQUFZLE9BQU8sYUFBYSxRQUFRLFVBQVUsS0FBSyxNQUFNLE1BQU0sR0FBRyxFQUFFLENBQUM7QUFDL0UsY0FBVSxRQUFRO0FBRWxCLFNBQUssY0FBYyxRQUFRLEVBQUUsZ0JBQWdCLEdBQUcsWUFBWTtBQUMzRCxXQUFLLGFBQWE7QUFDbEIsWUFBTSx3QkFBd0IsSUFBSTtBQUFBLElBQ25DLENBQUM7QUFBQSxFQUNBO0FBQUEsRUFFQSxNQUFNLFdBQVc7QUFDbEIsUUFBSSxLQUFLLGNBQWM7QUFDaEIsV0FBSyxhQUFhLE1BQU0sTUFBTTtBQUMxQixZQUFJLHdCQUFPLGtDQUEyQjtBQUN0QyxhQUFLLGVBQWU7QUFBQSxNQUN4QixDQUFDO0FBQUEsSUFDTDtBQUFBLEVBQ0Y7QUFBQSxFQUVBLE1BQU0sZUFBZTtBQUN0QixVQUFNLE9BQU8sS0FBSyxJQUFJLFVBQVUsUUFBUSxLQUFLO0FBQzdDLFFBQUcsTUFBTTtBQUNSLFlBQU0sS0FBSyxhQUFhO0FBQUEsUUFDeEIsTUFBTTtBQUFBLFFBQ04sUUFBUTtBQUFBLE1BQ04sQ0FBQztBQUNELFdBQUssSUFBSSxVQUFVLFdBQVcsSUFBSTtBQUFBLElBQ3JDO0FBQUEsRUFDQztBQUNGOyIsCiAgIm5hbWVzIjogWyJpbXBvcnRfb2JzaWRpYW4iLCAiaW1wb3J0X29ic2lkaWFuIl0KfQo=
