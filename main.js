/*
THIS IS A GENERATED/BUNDLED FILE BY ESBUILD
if you want to view the source, please visit the github repository of this plugin
*/

var __create = Object.create;
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __getProtoOf = Object.getPrototypeOf;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toESM = (mod, isNodeMode, target) => (target = mod != null ? __create(__getProtoOf(mod)) : {}, __copyProps(
  // If the importer is in node compatibility mode or this is not an ESM
  // file that has been converted to a CommonJS file using a Babel-
  // compatible transform (i.e. "__esModule" has not been set), then set
  // "default" to the CommonJS "module.exports" for node compatibility.
  isNodeMode || !mod || !mod.__esModule ? __defProp(target, "default", { value: mod, enumerable: true }) : target,
  mod
));
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);

// main.ts
var main_exports = {};
__export(main_exports, {
  default: () => DrawIOPlugin
});
module.exports = __toCommonJS(main_exports);
var import_obsidian = require("obsidian");
var path = __toESM(require("path"));
var fs = __toESM(require("fs"));
var import_child_process = require("child_process");
var import_buffer = require("buffer");
var DRAWIO_VIEW = "drawio-webview";
var DrawIOPlugin = class extends import_obsidian.Plugin {
  constructor() {
    super(...arguments);
    this.serveProcess = null;
  }
  async onload() {
    this.registerView(DRAWIO_VIEW, (leaf) => new DrawIOView(leaf, this));
    this.addRibbonIcon("shapes", "Open Draw.io", async () => {
      await this.launchDrawioServer();
      const leaf = this.app.workspace.getLeaf(true);
      await leaf.setViewState({
        type: DRAWIO_VIEW,
        active: true
      });
    });
    new import_obsidian.Notice("\u2705 Draw.io plugin loaded");
  }
  onunload() {
    if (this.serveProcess) {
      this.serveProcess.kill("SIGTERM");
      this.serveProcess = null;
      new import_obsidian.Notice("\u{1F6D1} Draw.io server stopped");
    }
    this.app.workspace.detachLeavesOfType(DRAWIO_VIEW);
  }
  async launchDrawioServer() {
    if (this.serveProcess)
      return;
    const vaultBasePath = this.app.vault.adapter.basePath;
    const pluginDir = path.join(vaultBasePath, this.manifest.dir);
    const webAppPath = path.join(pluginDir, "webapp");
    if (!fs.existsSync(webAppPath)) {
      new import_obsidian.Notice("\u{1F4C2} 'webapp' folder not found");
      return;
    }
    this.serveProcess = (0, import_child_process.spawn)("npx", ["serve", webAppPath, "-l", "8080"], {
      cwd: pluginDir,
      shell: true,
      detached: false
    });
    await new Promise((res) => setTimeout(res, 1e3));
  }
};
var DrawIOView = class extends import_obsidian.ItemView {
  constructor(leaf, plugin) {
    super(leaf);
    this.plugin = plugin;
  }
  getViewType() {
    return DRAWIO_VIEW;
  }
  getDisplayText() {
    return "Draw.io";
  }
  getIcon() {
    return "shapes";
  }
  async onOpen() {
    const container = this.containerEl.children[1];
    container.empty();
    const iframe = container.createEl("iframe", {
      attr: {
        src: "http://localhost:8080/?embed=1&proto=json&libraries=1&spin=1&ui=dark&dark=1&splash=0",
        style: "width: 100%; height: 100%; border: none;"
      }
    });
    const messageHandler = async (event) => {
      const origin = event.origin;
      if (origin !== "http://localhost:8080")
        return;
      let msg;
      try {
        msg = typeof event.data === "string" ? JSON.parse(event.data) : event.data;
      } catch (e) {
        console.error("\u041E\u0448\u0438\u0431\u043A\u0430 \u043F\u0430\u0440\u0441\u0438\u043D\u0433\u0430 \u0441\u043E\u043E\u0431\u0449\u0435\u043D\u0438\u044F \u043E\u0442 Draw.io:", e);
        return;
      }
      await handleDrawioMessage(msg, event.source, this.app);
    };
    window.addEventListener("message", messageHandler);
    this.register(() => {
      window.removeEventListener("message", messageHandler);
    });
  }
  async onClose() {
  }
};
async function saveDrawioSvgToVault(app, fileName, svgContent) {
  const folderPath = "Drawio";
  const fullPath = `${folderPath}/${fileName}.svg`;
  let contentToSave;
  if (svgContent.startsWith("data:image/svg+xml;base64,")) {
    try {
      const base64Part = svgContent.split(",")[1];
      contentToSave = import_buffer.Buffer.from(base64Part, "base64").toString("utf-8");
      console.log("SVG content decoded successfully.");
    } catch (e) {
      new import_obsidian.Notice("\u274C Failed to decode SVG content.");
      console.error("\u041E\u0448\u0438\u0431\u043A\u0430 \u0434\u0435\u043A\u043E\u0434\u0438\u0440\u043E\u0432\u0430\u043D\u0438\u044F SVG:", e);
      contentToSave = svgContent;
    }
  } else {
    contentToSave = svgContent;
  }
  try {
    const folder = app.vault.getAbstractFileByPath(folderPath);
    if (!folder) {
      await app.vault.createFolder(folderPath);
    }
  } catch (err) {
    console.error("\u041E\u0448\u0438\u0431\u043A\u0430 \u0441\u043E\u0437\u0434\u0430\u043D\u0438\u044F \u043F\u0430\u043F\u043A\u0438:", err);
  }
  const existingFile = app.vault.getAbstractFileByPath(fullPath);
  if (existingFile instanceof import_obsidian.TFile) {
    await app.vault.modify(existingFile, contentToSave);
  } else {
    await app.vault.create(fullPath, contentToSave);
  }
  new import_obsidian.Notice("\u{1F4BE} Diagram saved as editable SVG: " + fullPath);
}
async function handleDrawioMessage(msg, sourceWindow, app) {
  console.log("\u{1F4E9} Message from Draw.io:", msg);
  switch (msg.event) {
    case "init":
      sourceWindow.postMessage(
        JSON.stringify({
          action: "load",
          xml: "<mxGraphModel><root></root></mxGraphModel>",
          autosave: 1
        }),
        "http://localhost:8080"
      );
      break;
    case "save":
      sourceWindow.postMessage(
        JSON.stringify({
          action: "export",
          format: "xmlsvg",
          xml: true
        }),
        "http://localhost:8080"
      );
      break;
    case "export":
      console.log("\u{1F5BC} Exported data received", msg.data);
      await saveDrawioSvgToVault(app, "diagram.drawio", msg.data);
      break;
    case "change":
      console.log("\u{1F300} Diagram changed");
      break;
    case "exit":
      console.log("\u{1F44B} User exited Draw.io");
      break;
    case "ready":
      console.log("\u2705 Draw.io is ready");
      break;
    case "error":
      console.error("\u274C Error from Draw.io:", msg.message);
      break;
    case "load":
    case "configure":
      break;
  }
}
// Annotate the CommonJS export names for ESM import in node:
0 && (module.exports = {});
//# sourceMappingURL=data:application/json;base64,
